PROJECT WORK LOG - MoodBooMs
===================================

2025-07-27 18:17: Issue #72 completed - Implement mode switching and persistence
------------------------------------------------------------------------------
Successfully implemented centralized mode management with persistence:

✅ Created ModeContext provider for React state management
✅ Updated electron-store schema with mode field and migration
✅ Fixed performance issues with SimpleModeContext implementation
✅ Mode preference persists across app sessions
✅ Updated MenuBarApp to use centralized mode context
✅ Added debouncing to prevent rapid mode switching
✅ Maintained backward compatibility with legacy badassMode field

Mode switching now works instantly with proper state management and data persistence.

2025-07-27 17:50: Issue #69 completed - Extract shared core functionality
------------------------------------------------------------------------------
Successfully extracted shared core functionality into modular structure:

✅ Created core module directory structure (utils, hooks, services, components)
✅ Moved cycle calculations, phase detection, and cycle history to core/utils
✅ Created useStore and useCycleData hooks for clean data management
✅ Updated all import paths throughout the application
✅ Created index files for clean exports from core module
✅ Fixed mode toggle re-render issue with ref-based phase tracking
✅ All tests passing (except unrelated UI tests)
✅ App tested and working correctly

This establishes the foundation for the modular Queen/King architecture.

2025-07-27 14:27: Issue #60 completed - BadAss toggle implemented in app header
------------------------------------------------------------------------------
Implemented toggle switch to switch between Professional and BadAss modes:

✅ Added toggle in app header next to "MoodBooMs" title
✅ Professional mode shows medical terminology (Menstruation, Follicular Phase, etc.)
✅ BadAss mode shows humorous phrases (Bloody Hell Week, Horny AF, etc.)
✅ Fixed app crashes with 300ms debounce on phase updates
✅ Toggle state persists via electron-store

Changed approach from mode selection screen to simple toggle per user feedback.

2025-07-27 12:32: Completed Epic #19 - User Settings & Preferences
------------------------------------------------------------------
Implemented simplified settings panel focused on essential features:

✅ Issue #20: Create settings panel UI
✅ Issue #21: Add cycle length customization
✅ Issue #22: Implement notification preferences (partial)
⏭️ Issue #23: Add data export/import (moved to Epic #53, issue #57)
⏭️ Issue #24: Create onboarding flow (skipped - unnecessary)

Implementation Details:

Settings Panel (Issue #20):
- Created clean SettingsPanel component with organized sections
- Added as 4th tab in main UI with gear icon
- Includes save/reset functionality with visual feedback
- Shows unsaved changes warning

Cycle Length Customization (Issue #21):
- Slider control for 21-35 days range
- Real-time preview of cycle length
- Saves to electron-store on save button click
- Integrated with existing cycle calculations

Test Mode:
- Added test mode toggle in settings
- When enabled, shows test day slider in mood tab
- Allows testing different cycle days without changing start date
- Helps users preview different phases

Removed/Deferred Features:
- Theme selection removed (wasn't implemented)
- Data export/import moved to future epic for better planning
- Onboarding skipped as app is intuitive enough

PR #58 merged to main successfully.

2025-07-27 10:54: Completed Epic #13 - Dynamic UI & Tray Icons
------------------------------------------------------------
Successfully completed all dynamic UI and tray icon features:

✅ Issue #15: Verify dynamic icon implementation
✅ Issue #16: Create safety scale component  
✅ Issue #17: Add status card with phase info
⏭️ Issue #18: Implement smooth animations (SKIPPED - not essential)

Implementation Details:

Dynamic Icon Implementation (Issue #15):
- Implemented PNG icon loading using nativeImage.createFromPath()
- Icons dynamically update based on menstrual cycle phase
- All 6 phase icons working: sun, cloud-sun, cloud, cloud-rain-wind, cloud-lightning, tornado
- Icons stored in electron/assets/icons/ directory
- macOS template image support for proper menubar appearance

Safety Scale Component (Issue #16):
- Created SafetyScale component showing cycle phase intensity
- Visual representation using colored bars (green to red)
- Integrated into mood tab for quick phase assessment
- Responsive design with Tailwind CSS

Status Card Component (Issue #17):
- Comprehensive phase information display
- Shows cycle day, fertility percentage, and phase progress
- Visual progress bar for current phase
- Next phase preview with countdown
- Peak fertility alerts
- Clean, informative design with proper data hierarchy

Technical Achievements:
- Fixed all production crashes (GPU, CSP, React build paths)
- Successful PNG icon implementation after SVG failures
- Component-based architecture for UI elements
- Proper IPC communication for phase updates
- Production-ready stable application

Result: Epic #13 complete with functional dynamic icons and informative UI components. App provides visual feedback through both menubar icons and in-app components.

Next Steps:
- Choose next epic based on priority
- Consider Epic #19 (User Settings & Preferences)
- Or Epic #25 (Production Build & Distribution)

2025-07-27 10:34: Fixed Production Crashes and Icon Implementation
------------------------------------------------------------
Resolved critical production issues that prevented app from running:

PRODUCTION FIXES IMPLEMENTED:

1. GPU Process Crashes (Exit Code 15):
   - Problem: Renderer process crashed after ~40 seconds with GPU errors
   - Solution: Added app.disableHardwareAcceleration() in main.js
   - Result: App now runs stable without crashes

2. CSP Blocking React in Production:
   - Problem: Content Security Policy blocked React's inline scripts
   - Solution: Added 'unsafe-inline' to script-src in production CSP
   - Technical: React production build requires inline scripts to function

3. React Build Path Issues:
   - Problem: React build used absolute paths (/static/js/...) incompatible with file://
   - Solution: Added "homepage": "./" to package.json
   - Result: Build now uses relative paths that work with Electron

4. Phase Updates Not Working:
   - Problem: React useEffect wasn't firing phase updates in production
   - Solution: Added isLoading check to prevent updates during initialization
   - Result: Tray icons now update correctly when changing test mode

ICON IMPLEMENTATION:

Successfully implemented PNG icon loading for menubar:
- Created iconFromPNG.js module using nativeImage.createFromPath()
- Icons load from electron/assets/icons/ directory
- macOS template image support via setTemplateImage(true)
- All 6 phase icons working: sun, cloud-sun, cloud, cloud-rain-wind, cloud-lightning, tornado

Icon Mapping:
- "Bloody Hell Week" → cloud-lightning.png
- "Finally Got My Sh*t Together" → sun.png
- "Horny AF" → cloud-sun.png
- "Getting Real Tired of This BS" → cloud.png
- "Pre-Chaos Mood Swings" → cloud-rain-wind.png
- "Apocalypse Countdown" → tornado.png

TECHNICAL DISCOVERIES:
- SVG data URLs don't work with macOS menubar (createFromDataURL returns empty)
- PNG files work reliably with createFromPath()
- Production debugging requires extensive logging due to limited DevTools access
- React build configuration crucial for Electron compatibility

Files Modified:
- package.json (added homepage)
- electron/main.js (disabled hardware acceleration)
- electron/csp-config.js (fixed production CSP)
- src/components/MenuBarApp.jsx (fixed phase updates)
- electron/iconFromPNG.js (new - PNG icon loader)
- electron/trayManager.js (switched to PNG icons)

Testing:
- Created launch-menu.sh script for consistent testing
- Added comprehensive logging for production debugging
- Verified all crashes resolved
- Confirmed icons update dynamically

Result: Production app now runs stable with dynamic PNG icons that match the React app exactly.

Next Steps:
- Continue with Epic #13 remaining issues
- Add status card with phase info (Issue #17)
- Implement smooth animations (Issue #18)

2025-07-26 17:21: Completed Epic #7 - Calendar & Date Calculations
------------------------------------------------------------
Successfully completed all calendar and date calculation features:

✅ Issue #8: Create cycle calculation utility module
✅ Issue #9: Implement calendar component with color coding  
✅ Issue #10: Add date selection and navigation
✅ Issue #11: Create fertility phase detection logic
✅ Issue #12: Add cycle history tracking
✅ Issue #51: Add period start adjustment/reset functionality

Implementation Details:

Cycle Calculations (Issue #8):
- Created comprehensive cycleCalculations.js module
- Accurate cycle day calculation with overflow handling
- Fertility level detection (very-low to very-high)
- Current phase identification
- 26 tests covering all edge cases

Calendar Component (Issue #9):
- Interactive month view with navigation
- Fertility-based color coding:
  - Red: Menstruation
  - Yellow: Low fertility
  - Gray: Medium fertility  
  - Green: High fertility
  - Dark Green: Peak fertility (ovulation)
- Responsive design with Tailwind CSS
- 12 component tests

Phase Detection (Issue #11):
- Enhanced phase detection with fertility percentages
- Phase-specific descriptions, moods, and advice
- Symptom tracking per phase
- Ovulation prediction
- PhaseDetail component for selected dates
- 21 comprehensive tests

Cycle History (Issue #12):
- Complete cycle tracking system
- Statistics calculation (average, regularity)
- Next period prediction
- HistoryView component with visual statistics
- Period start adjustment functionality
- Electron-store integration
- 23 tests for history features

Technical Achievements:
- Modular architecture with reusable utilities
- 85 total tests passing
- Medical accuracy in calculations
- Responsive UI with three tabs (Mood, Calendar, History)
- Data persistence across sessions

User Features Delivered:
- View fertility status for any date
- Track cycle patterns over time
- Get predictions for next period
- See phase-specific advice and symptoms
- Adjust period start when irregular
- Visual calendar with color-coded fertility

Fixed Issues:
- Calendar test compatibility
- ES6 module imports in React
- Babel deprecation warning (added missing dependency)

All branches merged to main via PR #55
Epic #7 closed successfully

Next Epic: User can choose from remaining epics based on priority

2025-07-26 13:16: Completed Security Hardening (Issue #6)
------------------------------------------------------------
Verified and enhanced security configuration for Electron app:

Implementation Details:
- Confirmed nodeIntegration: false in all windows
- Confirmed contextIsolation: true in all windows
- Created security-config.js module for centralized security
- Added runtime security verification checks
- Implemented additional security headers

Security Enhancements:
- Navigation restrictions to prevent external URLs
- Blocked new window creation
- Disabled remote module
- Disabled webviewTag
- Added X-Frame-Options and other security headers

Verification:
- Audited renderer code - no Node.js API usage found
- Created comprehensive security test suite
- All 14 security tests pass successfully
- Verified no access to require, process, fs, etc. from renderer

Technical Configuration:
- webSecurity: true (enforces same-origin policy)
- allowRunningInsecureContent: false
- experimentalFeatures: false
- enableBlinkFeatures: '' (all disabled)

Documentation:
- SECURITY_DOCUMENTATION.md with complete guide
- Security checklist for releases
- Troubleshooting common issues
- Maintenance procedures

Result: Application fully secured following Electron best practices. All renderer access to Node.js APIs blocked, with functionality only available through contextBridge.

Epic #1 Complete! All security infrastructure implemented:
✅ Issue #2: Secure Electron preload script
✅ Issue #3: electron-store for data persistence  
✅ Issue #4: IPC communication layer
✅ Issue #5: Content Security Policy
✅ Issue #6: Security hardening

2025-07-26 13:03: Implemented Content Security Policy (Issue #5)
------------------------------------------------------------
Added comprehensive CSP to prevent XSS attacks and control resource loading:

Implementation Details:
- Created csp-config.js with environment-specific policies
- Applied CSP headers via Electron session.webRequest
- Added CSP violation capture and reporting
- Implemented different policies for dev/prod environments

Security Policies:
- Production: Strict self-only policy with minimal exceptions
- Development: Allows localhost and eval for hot reload
- Both allow 'unsafe-inline' styles for Tailwind CSS
- Data URIs permitted for inline images

Key Features:
- Automatic environment detection
- CSP violation reporting to main process
- Comprehensive test suite for policy validation
- Detailed documentation of security choices

Technical Decisions:
- 'unsafe-inline' for styles: Required by Tailwind CSS
- data: URIs: Needed for programmatic icon generation
- No 'unsafe-eval' in production
- WebSocket allowed in dev for hot module replacement

Testing:
- Created csp-test.js to verify policy enforcement
- Tests blocking of inline scripts, external resources
- Validates allowed resources work correctly
- Checks proper CSP header formatting

Documentation:
- CSP_DOCUMENTATION.md with complete implementation guide
- Security considerations and rationale
- Troubleshooting guide for common issues
- Monitoring and maintenance procedures

Result: Robust CSP implementation that protects against XSS while maintaining app functionality.

Next Steps:
- Complete Epic #1 with issue #6
- Remove nodeIntegration (already done, needs verification)
- Begin Epic #7: Calendar & Date Calculations

2025-07-26 12:47: Created Comprehensive IPC Communication Layer (Issue #4)
------------------------------------------------------------
Designed and implemented a robust IPC layer with proper structure and conventions:

Implementation Details:
- Created ipc-channels.js with centralized channel definitions
- Implemented naming convention: domain:action-target
- Built ipcHandlersV2.js with error handling middleware
- Added all required cycle-specific channels
- Created preloadV2.js with organized API structure

Key Features:
- Consistent channel naming across entire application
- Comprehensive error handling with IPCError class
- Parameter validation for all IPC handlers
- Backward compatibility with existing store operations
- Development-only channels for debugging

Documentation:
- IPC_DOCUMENTATION.md - Complete channel reference
- IPC_MIGRATION.md - Step-by-step migration guide
- TypeScript definitions in src/types/ipc.d.ts
- Test suite in tests/electron/ipc-tests.js

Channel Categories:
- Cycle operations (get-data, save-data, get-history, add-history)
- Settings management (get, set, reset, get-all)
- Window control (minimize, maximize, hide, show, position)
- System information (platform, locale, theme)
- App operations (version, updates, quit, restart)
- Notifications, dialogs, and development tools

Technical Improvements:
- Error codes: IPC_INVALID_PARAMS, IPC_HANDLER_ERROR, etc.
- Validation middleware for parameter checking
- Async/await pattern throughout
- Grouped channels by feature domain
- Migration map for old channel names

Result: A professional, maintainable IPC layer that provides secure communication between main and renderer processes with excellent developer experience.

Next Steps:
- Migrate existing code to use new IPC layer
- Continue with Epic #1 security issues
- Issue #5: Add Content Security Policy
- Issue #6: Remove nodeIntegration

2025-07-26 12:30: Implemented Secure Data Persistence (Issue #3)
------------------------------------------------------------
Successfully implemented electron-store for secure data persistence:

Implementation Details:
- Installed electron-store@8.1.0 (CommonJS version for compatibility)
- Created comprehensive store.js module with schema validation
- Integrated store operations into IPC handlers
- Connected React app to use persistent storage

Data Schema:
- cycleData: Start date, cycle length (21-35 days), history tracking
- preferences: Notifications, theme, language, test mode
- appState: Version, last opened, onboarding status

Key Features:
- Automatic data validation before saving
- Encrypted storage for security
- Cycle history tracking (keeps last 12 cycles)
- Export/import functionality for data backup
- Merge updates to preserve existing data

Technical Discoveries:
- electron-store v10+ is ESM-only, incompatible with current setup
- Downgraded to v8.1.0 for CommonJS compatibility
- Store can only be used in Electron context, not Node.js
- All store access must go through IPC handlers

Files Added/Modified:
- electron/store.js (new - complete store implementation)
- electron/ipcHandlers.js (connected store operations)
- src/components/MenuBarApp.jsx (added persistence on data changes)
- tests/electron/test-store-electron.js (new - Electron tests)
- CLAUDE.md (documented store implementation)

Testing:
- Created comprehensive test suite
- Verified data persists across app restarts
- Validated all schema constraints working
- Export/import functionality tested

Result: User cycle data and preferences now persist between app sessions, providing a seamless experience.

Next Steps:
- Continue with Epic #1 security issues
- Issue #4: Create IPC communication layer (partially done)
- Issue #5: Add Content Security Policy

2025-07-26 11:37: Implemented Dynamic Weather Icons (Issue #15)
------------------------------------------------------------
Successfully implemented dynamic tray icons that change based on cycle phase:

Implementation Details:
- Created IconGeneratorLucide.js for weather-themed icons
- Built TrayManager.js to handle icon updates
- Added IPC communication via preload.js
- React component sends phase updates to main process

Icon Mapping:
- Sun ☀️ - "Finally Got My Sh*t Together" (follicular)
- Cloud+Sun 🌤️ - "Horny AF" (ovulation)
- Cloud ☁️ - "Getting Real Tired of This BS" (early luteal)
- Cloud+Rain 🌧️ - "Pre-Chaos Mood Swings" (late luteal)
- Cloud+Lightning ⛈️ - "Bloody Hell Week" (menstruation)
- Tornado 🌪️ - "Apocalypse Countdown" (PMS)

Technical Discoveries:
- PNG loading still fails on macOS 15.5
- Programmatic icon generation works reliably
- 22x22 size optimal for macOS menubar
- 2x resolution improves quality on retina displays
- Simple shapes more effective than complex details

Files Added/Modified:
- electron/iconGeneratorLucide.js (new)
- electron/trayManager.js (new)
- electron/preload.js (new)
- electron/main.js (modified for IPC)
- src/components/MenuBarApp.jsx (added phase updates)
- CLAUDE.md (documented solutions)
- README.md (added feature description)

Result: Menubar icon now dynamically changes from sunny to stormy weather based on menstrual cycle phase, providing visual feedback at a glance.

Next Steps:
- Further icon refinements for better clarity
- Add icon animations/transitions
- Support for dark/light mode themes

2025-07-26 10:42: Fixed Menubar Icon and Pushed to Main
------------------------------------------------------------
Completed icon fix implementation and merged to main branch:

Git Commit: 6323a6b
Message: "fix: implement stable programmatic icon for macOS 15.5 menubar"
- Merged fix-menubar-icon branch to main
- Pushed changes to GitHub repository
- Resolves issue #49

Next Steps:
- Work on issue #15: Implement dynamic tray icon switching
- Part of Epic #13: Dynamic UI & Tray Icons
- Create feature branch for dynamic icon implementation

2025-07-26 10:29: Resolved Menubar Icon Crashes on macOS 15.5
------------------------------------------------------------
Successfully implemented stable icon solution for macOS Sequoia:

Problem:
- VS Code and app crashed when attempting to load PNG icons
- All PNG file loading methods resulted in empty icons
- macOS 15.5 has compatibility issues with standard icon loading

Solution Implemented:
- Created programmatic icon generation in electron/main.js
- Draws a 16x16 purple/pink circle icon in memory
- Bypasses file loading entirely using Buffer and nativeImage
- Multiple fallback strategies ensure app always starts

Technical Details:
- Primary: Try loading PNG files (for future compatibility)
- Secondary: Create colored circle icon programmatically
- Tertiary: Fall back to text-only "MB" if needed
- Added comprehensive error handling and logging

Result:
- App runs stably with visible menubar icon
- No more crashes on icon loading
- Icon appears as purple/pink circle in menubar
- Solution documented in CLAUDE.md for future reference

Files Modified:
- electron/main.js - Implemented programmatic icon generation
- CLAUDE.md - Added working icon solution documentation

2025-07-26 07:56: Project Structure Refactoring
------------------------------------------------------------
Reorganized project for better maintainability:

Created folder structure:
- /electron/assets/icons - Production icon files
- /tests/electron - Electron-specific test files
- /tests/unit - Unit tests
- /tests/integration - Integration tests
- /temp - Temporary files and experiments (gitignored)
- /logs - Log files (gitignored)

Actions taken:
- Moved all test files from electron/ to tests/electron/
- Moved all icon files to electron/assets/icons/
- Moved log files to logs/
- Updated .gitignore to exclude temp/ and logs/
- Added README files to test directories
- Updated main.js with comment about icon path

Result: Clean separation between production code and tests

2025-07-26 07:52: Tray Icon Investigation
------------------------------------------------------------
Investigation into why icons don't work on macOS 15.5:
- Confirmed this is a macOS Sequoia (15.x) compatibility issue
- All image loading methods fail (direct path, nativeImage, base64)
- Icons always return empty (0x0 size) even for valid PNG files
- User briefly saw question mark icon (macOS's missing icon indicator)
- System refuses to load any image files for tray icons
- Created GitHub issue #49 to track this problem

Findings:
- This appears to be an OS-level restriction/bug
- Other Electron apps also affected (1Password, etc.)
- Only workaround is text-based tray using setTitle()
- May need to wait for Electron or macOS updates

2025-07-25 23:58: Menubar App Development & Debugging Session
------------------------------------------------------------
Work completed:
- Successfully created working macOS menubar app with Electron
- Resolved multiple critical issues preventing menubar functionality
- Cleaned up unnecessary files from failed approaches

CRITICAL DEBUGGING FINDINGS:

1. Electron Tray Icon Issues on macOS 15.5 (Sequoia):
   - Standard icon loading methods fail with "invalid icon" errors
   - Solution: Use empty nativeImage with setTitle('MB') for text display
   - Icon files cause crashes even when properly formatted

2. Electron Version Compatibility:
   - Electron 37.x causes crashes after ~10 seconds on macOS 15.5
   - Solution: Downgrade to Electron 28.3.3 for stability
   - Version 28.x works reliably without timeout crashes

3. Window Resizing Crashes:
   - Any window resize operation causes immediate app crash
   - Solution: Set resizable: false and all related properties
   - Must disable: resizable, minimizable, maximizable, fullscreenable

4. Working Configuration:
   - Window size: 380x520 (fits all content without scrolling)
   - Use empty image for tray: nativeImage.createEmpty()
   - Use tray.setTitle('MB') instead of icon
   - Keep app alive with setInterval(() => {}, 1000)

Approaches Tried (Failed):
- Tauri framework - tray icon issues, complex setup
- menubar npm package - incompatible with newer Electron
- Various icon formats (PNG, template images) - all crash
- Electron 37.x - timeout crashes after 10 seconds

Files Removed:
- src-tauri/ directory (Tauri attempt)
- scripts/ directory (unused)
- Various test files (electron-alternative.js, test.html, etc.)
- Debug and log files

Final Working Structure:
- electron/main.js - Minimal working menubar app
- Simple configuration without complex features
- Text-based menubar icon ('MB')
- Stable window management

Next priority tasks:
- Implement proper icon support when macOS compatibility improves
- Add data persistence (electron-store)
- Enhance security with contextBridge
- Build production version
- CRITICAL: Make app packable and transferable to any Mac (Epic #7)
- Future: Add Windows support for cross-platform distribution


2025-07-25 22:25: Session work (no new commits)
------------------------------------------------------------
Work completed:



Session work (uncommitted):
  - Modified: .gitignore
  - Modified Electron main process: main.js
  - Modified: package.json
  - Updated React component: MenuBarApp.jsx

Files modified:


Next priority tasks:
GitHub Issues (Priority):
  - #10: Add date selection and navigation
  - #11: Create fertility phase detection logic
  - #12: Add cycle history tracking
  - #13: [EPIC] Dynamic UI & Tray Icons
  - #14: Design and create tray icon set for all phases

Suggested Improvements (not yet in GitHub):
  - Implement data persistence with electron-store
  - Create dynamic tray icons for different cycle phases
  - Add user onboarding flow for first-time users


2025-07-25 21:00: Created project structure with 6 Epics and 30 child issues
------------------------------------------------------------
Work completed:
- Created comprehensive project plan in README.md
- Set up GitHub project board with 6 epics and 30 child issues
- Established development roadmap and architecture

GitHub Issues Created:
Epics:
  - #1: [EPIC] Core Infrastructure & Security
  - #7: [EPIC] Calendar & Date Calculations  
  - #13: [EPIC] Dynamic UI & Tray Icons
  - #19: [EPIC] User Settings & Preferences
  - #25: [EPIC] Production Build & Distribution
  - #31: [EPIC] Testing & Quality Assurance

Child Issues:
  - #2-#6: Security and infrastructure tasks
  - #8-#12: Calendar and calculation features
  - #14-#18: UI and visual components
  - #20-#24: Settings and user preferences
  - #26-#30: Build and distribution setup
  - #32-#36: Testing and quality assurance

Files modified:
  - README.md (complete redesign with project plan)
  - CLAUDE.md (enhanced with development practices)

Next priority tasks:
GitHub Issues (Priority):
[CRITICAL] - #1: [EPIC] Core Infrastructure & Security
[HIGH]     - #2: Implement secure Electron preload script with contextBridge
[HIGH]     - #3: Set up electron-store for data persistence
[HIGH]     - #4: Create IPC communication layer for main/renderer
[HIGH]     - #5: Add Content Security Policy (CSP)
[HIGH]     - #6: Remove nodeIntegration and enable contextIsolation

Development approach:
- Start with Epic #1 to establish secure foundation
- Current implementation has critical security vulnerabilities
- Must implement contextBridge and remove nodeIntegration
- Add data persistence before implementing features

Suggested next steps:
1. Create feature branch for Epic #1: `git checkout -b feat/core-infrastructure`
2. Begin with issue #2 - preload script implementation
3. Set up basic testing infrastructure early
4. Document architectural decisions as we go

1. Electron Tray Icon Issues on macOS 15.5 (Sequoia):
   - Standard icon loading methods fail with "invalid icon" errors
   - Solution: Use empty nativeImage with setTitle('MB') for text display
   - Icon files cause crashes even when properly formatted

2. Electron Version Compatibility:
   - Electron 37.x causes crashes after ~10 seconds on macOS 15.5
   - Solution: Downgrade to Electron 28.3.3 for stability
   - Version 28.x works reliably without timeout crashes

3. Window Resizing Crashes:
   - Any window resize operation causes immediate app crash
   - Solution: Set resizable: false and all related properties
   - Must disable: resizable, minimizable, maximizable, fullscreenable

4. Working Configuration:
   - Window size: 380x520 (fits all content without scrolling)
   - Use empty image for tray: nativeImage.createEmpty()
   - Use tray.setTitle('MB') instead of icon
   - Keep app alive with setInterval(() => {}, 1000)

Approaches Tried (Failed):
- Tauri framework - tray icon issues, complex setup
- menubar npm package - incompatible with newer Electron
- Various icon formats (PNG, template images) - all crash
- Electron 37.x - timeout crashes after 10 seconds

Files Removed:
- src-tauri/ directory (Tauri attempt)
- scripts/ directory (unused)
- Various test files (electron-alternative.js, test.html, etc.)
- Debug and log files

Final Working Structure:
- electron/main.js - Minimal working menubar app
- Simple configuration without complex features
- Text-based menubar icon ('MB')
- Stable window management

Next priority tasks:
- Implement proper icon support when macOS compatibility improves
- Add data persistence (electron-store)
- Enhance security with contextBridge
- Build production version
- CRITICAL: Make app packable and transferable to any Mac (Epic #7)
- Future: Add Windows support for cross-platform distribution: Epic #1 (Core Infrastructure & Security) COMPLETED
------------------------------------------------------------
Successfully completed all 5 security infrastructure issues:

✅ Issue #2: Secure Electron preload script with contextBridge
✅ Issue #3: Set up electron-store for data persistence
✅ Issue #4: Create IPC communication layer for main/renderer
✅ Issue #5: Add Content Security Policy (CSP)
✅ Issue #6: Remove nodeIntegration and enable contextIsolation

The application now has:
- Secure renderer-main process communication via contextBridge
- Encrypted data persistence with schema validation
- Structured IPC channel system with error handling
- Content Security Policy preventing XSS attacks
- Full security hardening following Electron best practices
- Comprehensive test coverage for all security features

All branches merged to feat/epic-1-core-infrastructure
Ready to begin Epic #7: Calendar & Date Calculations

2025-07-26 13:44: Started Epic #7 - Calendar & Date Calculations
------------------------------------------------------------
Created epic branch feat/epic-7-calendar-date-calculations using wi.sh script:

Epic Overview:
- Implement comprehensive calendar view with fertility tracking
- Create cycle calculations, phase detection, and visual representation
- Core feature for transforming raw cycle data into actionable insights

Child Issues to Complete:
- Issue #8: Create cycle calculation utility module
- Issue #9: Implement calendar component with color coding
- Issue #10: Add date selection and navigation
- Issue #11: Create fertility phase detection logic
- Issue #12: Add cycle history tracking

Technical Approach:
- Build modular cycle calculation engine
- Create reusable calendar component
- Implement color-coding system for fertility levels
- Add date navigation controls
- Store and analyze historical data for predictions

Dependencies:
- Requires Epic #1 completion (✅ done)
- Will use date-fns library for date calculations

Next Steps:
- Begin with Issue #8: Create cycle calculation utility module
- Set up date-fns dependency
- Create tests for cycle calculations

